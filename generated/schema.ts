// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class FunctionCallLog extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save FunctionCallLog entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save FunctionCallLog entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("FunctionCallLog", id.toString(), this);
    }
  }

  static load(id: string): FunctionCallLog | null {
    return changetype<FunctionCallLog | null>(store.get("FunctionCallLog", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get methodName(): string | null {
    let value = this.get("methodName");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set methodName(value: string | null) {
    if (!value) {
      this.unset("methodName");
    } else {
      this.set("methodName", Value.fromString(<string>value));
    }
  }

  get args(): string | null {
    let value = this.get("args");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set args(value: string | null) {
    if (!value) {
      this.unset("args");
    } else {
      this.set("args", Value.fromString(<string>value));
    }
  }

  get deposit(): string | null {
    let value = this.get("deposit");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set deposit(value: string | null) {
    if (!value) {
      this.unset("deposit");
    } else {
      this.set("deposit", Value.fromString(<string>value));
    }
  }

  get outcomeLogs(): string | null {
    let value = this.get("outcomeLogs");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set outcomeLogs(value: string | null) {
    if (!value) {
      this.unset("outcomeLogs");
    } else {
      this.set("outcomeLogs", Value.fromString(<string>value));
    }
  }

  get outcomeStatusValue(): string | null {
    let value = this.get("outcomeStatusValue");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set outcomeStatusValue(value: string | null) {
    if (!value) {
      this.unset("outcomeStatusValue");
    } else {
      this.set("outcomeStatusValue", Value.fromString(<string>value));
    }
  }

  get outcomeStatusData(): string | null {
    let value = this.get("outcomeStatusData");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set outcomeStatusData(value: string | null) {
    if (!value) {
      this.unset("outcomeStatusData");
    } else {
      this.set("outcomeStatusData", Value.fromString(<string>value));
    }
  }

  get eventName(): string | null {
    let value = this.get("eventName");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set eventName(value: string | null) {
    if (!value) {
      this.unset("eventName");
    } else {
      this.set("eventName", Value.fromString(<string>value));
    }
  }

  get eventStandard(): string | null {
    let value = this.get("eventStandard");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set eventStandard(value: string | null) {
    if (!value) {
      this.unset("eventStandard");
    } else {
      this.set("eventStandard", Value.fromString(<string>value));
    }
  }

  get signerId(): string | null {
    let value = this.get("signerId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set signerId(value: string | null) {
    if (!value) {
      this.unset("signerId");
    } else {
      this.set("signerId", Value.fromString(<string>value));
    }
  }

  get predecessordId(): string | null {
    let value = this.get("predecessordId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set predecessordId(value: string | null) {
    if (!value) {
      this.unset("predecessordId");
    } else {
      this.set("predecessordId", Value.fromString(<string>value));
    }
  }

  get receiverId(): string | null {
    let value = this.get("receiverId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set receiverId(value: string | null) {
    if (!value) {
      this.unset("receiverId");
    } else {
      this.set("receiverId", Value.fromString(<string>value));
    }
  }

  get blockHash(): string | null {
    let value = this.get("blockHash");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set blockHash(value: string | null) {
    if (!value) {
      this.unset("blockHash");
    } else {
      this.set("blockHash", Value.fromString(<string>value));
    }
  }

  get blockHeight(): string | null {
    let value = this.get("blockHeight");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set blockHeight(value: string | null) {
    if (!value) {
      this.unset("blockHeight");
    } else {
      this.set("blockHeight", Value.fromString(<string>value));
    }
  }

  get blockTimestamp(): string | null {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set blockTimestamp(value: string | null) {
    if (!value) {
      this.unset("blockTimestamp");
    } else {
      this.set("blockTimestamp", Value.fromString(<string>value));
    }
  }
}

export class TransferCallLog extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TransferCallLog entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save TransferCallLog entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("TransferCallLog", id.toString(), this);
    }
  }

  static load(id: string): TransferCallLog | null {
    return changetype<TransferCallLog | null>(store.get("TransferCallLog", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get deposit(): string | null {
    let value = this.get("deposit");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set deposit(value: string | null) {
    if (!value) {
      this.unset("deposit");
    } else {
      this.set("deposit", Value.fromString(<string>value));
    }
  }

  get blockHash(): string | null {
    let value = this.get("blockHash");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set blockHash(value: string | null) {
    if (!value) {
      this.unset("blockHash");
    } else {
      this.set("blockHash", Value.fromString(<string>value));
    }
  }

  get outcomeLogs(): string | null {
    let value = this.get("outcomeLogs");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set outcomeLogs(value: string | null) {
    if (!value) {
      this.unset("outcomeLogs");
    } else {
      this.set("outcomeLogs", Value.fromString(<string>value));
    }
  }
}

export class DeployContractLog extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DeployContractLog entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save DeployContractLog entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("DeployContractLog", id.toString(), this);
    }
  }

  static load(id: string): DeployContractLog | null {
    return changetype<DeployContractLog | null>(
      store.get("DeployContractLog", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get codeHash(): string | null {
    let value = this.get("codeHash");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set codeHash(value: string | null) {
    if (!value) {
      this.unset("codeHash");
    } else {
      this.set("codeHash", Value.fromString(<string>value));
    }
  }

  get blockHash(): string | null {
    let value = this.get("blockHash");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set blockHash(value: string | null) {
    if (!value) {
      this.unset("blockHash");
    } else {
      this.set("blockHash", Value.fromString(<string>value));
    }
  }

  get outcomeLogs(): string | null {
    let value = this.get("outcomeLogs");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set outcomeLogs(value: string | null) {
    if (!value) {
      this.unset("outcomeLogs");
    } else {
      this.set("outcomeLogs", Value.fromString(<string>value));
    }
  }
}

export class ReceiptBundle extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ReceiptBundle entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save ReceiptBundle entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("ReceiptBundle", id.toString(), this);
    }
  }

  static load(id: string): ReceiptBundle | null {
    return changetype<ReceiptBundle | null>(store.get("ReceiptBundle", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get receipt_gasPrice(): string | null {
    let value = this.get("receipt_gasPrice");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set receipt_gasPrice(value: string | null) {
    if (!value) {
      this.unset("receipt_gasPrice");
    } else {
      this.set("receipt_gasPrice", Value.fromString(<string>value));
    }
  }

  get receipt_gasPrices(): string | null {
    let value = this.get("receipt_gasPrices");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set receipt_gasPrices(value: string | null) {
    if (!value) {
      this.unset("receipt_gasPrices");
    } else {
      this.set("receipt_gasPrices", Value.fromString(<string>value));
    }
  }

  get receipt_actions(): Array<string> | null {
    let value = this.get("receipt_actions");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set receipt_actions(value: Array<string> | null) {
    if (!value) {
      this.unset("receipt_actions");
    } else {
      this.set("receipt_actions", Value.fromStringArray(<Array<string>>value));
    }
  }

  get receipt_inputDataIDs(): Array<string> | null {
    let value = this.get("receipt_inputDataIDs");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set receipt_inputDataIDs(value: Array<string> | null) {
    if (!value) {
      this.unset("receipt_inputDataIDs");
    } else {
      this.set(
        "receipt_inputDataIDs",
        Value.fromStringArray(<Array<string>>value)
      );
    }
  }

  get receipt_outputDataReceivers(): Array<string> | null {
    let value = this.get("receipt_outputDataReceivers");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set receipt_outputDataReceivers(value: Array<string> | null) {
    if (!value) {
      this.unset("receipt_outputDataReceivers");
    } else {
      this.set(
        "receipt_outputDataReceivers",
        Value.fromStringArray(<Array<string>>value)
      );
    }
  }

  get receipt_predecessorId(): string | null {
    let value = this.get("receipt_predecessorId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set receipt_predecessorId(value: string | null) {
    if (!value) {
      this.unset("receipt_predecessorId");
    } else {
      this.set("receipt_predecessorId", Value.fromString(<string>value));
    }
  }

  get receipt_receiverId(): string | null {
    let value = this.get("receipt_receiverId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set receipt_receiverId(value: string | null) {
    if (!value) {
      this.unset("receipt_receiverId");
    } else {
      this.set("receipt_receiverId", Value.fromString(<string>value));
    }
  }

  get receipt_signerId(): string | null {
    let value = this.get("receipt_signerId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set receipt_signerId(value: string | null) {
    if (!value) {
      this.unset("receipt_signerId");
    } else {
      this.set("receipt_signerId", Value.fromString(<string>value));
    }
  }

  get receipt_signerPublicKey(): string | null {
    let value = this.get("receipt_signerPublicKey");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set receipt_signerPublicKey(value: string | null) {
    if (!value) {
      this.unset("receipt_signerPublicKey");
    } else {
      this.set("receipt_signerPublicKey", Value.fromString(<string>value));
    }
  }

  get receipt_ranTwice(): string | null {
    let value = this.get("receipt_ranTwice");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set receipt_ranTwice(value: string | null) {
    if (!value) {
      this.unset("receipt_ranTwice");
    } else {
      this.set("receipt_ranTwice", Value.fromString(<string>value));
    }
  }

  get outcome_blockHash(): string | null {
    let value = this.get("outcome_blockHash");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set outcome_blockHash(value: string | null) {
    if (!value) {
      this.unset("outcome_blockHash");
    } else {
      this.set("outcome_blockHash", Value.fromString(<string>value));
    }
  }

  get outcome_executorId(): string | null {
    let value = this.get("outcome_executorId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set outcome_executorId(value: string | null) {
    if (!value) {
      this.unset("outcome_executorId");
    } else {
      this.set("outcome_executorId", Value.fromString(<string>value));
    }
  }

  get outcome_id(): string | null {
    let value = this.get("outcome_id");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set outcome_id(value: string | null) {
    if (!value) {
      this.unset("outcome_id");
    } else {
      this.set("outcome_id", Value.fromString(<string>value));
    }
  }

  get outcome_gasBurnt(): string | null {
    let value = this.get("outcome_gasBurnt");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set outcome_gasBurnt(value: string | null) {
    if (!value) {
      this.unset("outcome_gasBurnt");
    } else {
      this.set("outcome_gasBurnt", Value.fromString(<string>value));
    }
  }

  get outcome_logs(): string | null {
    let value = this.get("outcome_logs");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set outcome_logs(value: string | null) {
    if (!value) {
      this.unset("outcome_logs");
    } else {
      this.set("outcome_logs", Value.fromString(<string>value));
    }
  }

  get outcome_proof(): string | null {
    let value = this.get("outcome_proof");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set outcome_proof(value: string | null) {
    if (!value) {
      this.unset("outcome_proof");
    } else {
      this.set("outcome_proof", Value.fromString(<string>value));
    }
  }

  get outcome_receiptIds(): Array<string> | null {
    let value = this.get("outcome_receiptIds");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set outcome_receiptIds(value: Array<string> | null) {
    if (!value) {
      this.unset("outcome_receiptIds");
    } else {
      this.set(
        "outcome_receiptIds",
        Value.fromStringArray(<Array<string>>value)
      );
    }
  }

  get outcome_status(): string | null {
    let value = this.get("outcome_status");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set outcome_status(value: string | null) {
    if (!value) {
      this.unset("outcome_status");
    } else {
      this.set("outcome_status", Value.fromString(<string>value));
    }
  }

  get outcome_tokensBurnt(): string | null {
    let value = this.get("outcome_tokensBurnt");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set outcome_tokensBurnt(value: string | null) {
    if (!value) {
      this.unset("outcome_tokensBurnt");
    } else {
      this.set("outcome_tokensBurnt", Value.fromString(<string>value));
    }
  }

  get blocks_propogated(): Array<string> | null {
    let value = this.get("blocks_propogated");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set blocks_propogated(value: Array<string> | null) {
    if (!value) {
      this.unset("blocks_propogated");
    } else {
      this.set(
        "blocks_propogated",
        Value.fromStringArray(<Array<string>>value)
      );
    }
  }
}

export class Function extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Function entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Function entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Function", id.toString(), this);
    }
  }

  static load(id: string): Function | null {
    return changetype<Function | null>(store.get("Function", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get example_args(): string | null {
    let value = this.get("example_args");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set example_args(value: string | null) {
    if (!value) {
      this.unset("example_args");
    } else {
      this.set("example_args", Value.fromString(<string>value));
    }
  }

  get example_result(): string | null {
    let value = this.get("example_result");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set example_result(value: string | null) {
    if (!value) {
      this.unset("example_result");
    } else {
      this.set("example_result", Value.fromString(<string>value));
    }
  }

  get example_outcomeLogs(): string | null {
    let value = this.get("example_outcomeLogs");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set example_outcomeLogs(value: string | null) {
    if (!value) {
      this.unset("example_outcomeLogs");
    } else {
      this.set("example_outcomeLogs", Value.fromString(<string>value));
    }
  }
}
